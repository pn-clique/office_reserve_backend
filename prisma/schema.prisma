generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  name             String    @db.VarChar(500)
  email            String    @unique @db.VarChar(256)
  password         String?   @db.VarChar(250)
  type_user        UserType
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  phone            String?   @db.VarChar(13)
  password_Expires DateTime?
  password_token   String?   @db.VarChar(13)
  photo            String?
  Booking          Booking[]

  @@map("users")
}

model Place {
  id            String    @id @default(uuid())
  name          String    @db.VarChar(250)
  capacity      Int
  photo         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  most_required Int?      @default(1)
  Booking       Booking[]

  @@map("places")
}

model Finance {
  id        String   @id @default(uuid())
  value     Float    @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("finances")
}

model Modality {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(250)
  description String
  price       Float
  duration    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Booking     Booking[]

  @@map("modalities")
}

model Booking {
  id            String          @id @default(uuid())
  user_id       String
  place_id      String
  modality_id   String
  init_date     DateTime
  final_date    DateTime
  status        BookingStatus
  reference     String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  description   String?
  end_time      String
  start_time    String
  modality      Modality        @relation(fields: [modality_id], references: [id])
  place         Place           @relation(fields: [place_id], references: [id])
  user          User            @relation(fields: [user_id], references: [id])
  PurchaseOrder PurchaseOrder[]

  @@map("bookings")
}

model PurchaseOrder {
  id          String   @id @default(uuid())
  booking_id  String
  total_price Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  booking     Booking  @relation(fields: [booking_id], references: [id])

  @@map("purchase_orders")
}

enum UserType {
  ADMIN
  USER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
